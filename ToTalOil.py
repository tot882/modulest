from .. import loader, utils
import asyncio
from asyncio import sleep
from ..inline.types import InlineCall
from telethon.tl.functions.messages import SendMessageRequest
# meta developer: @tot_882 P.S thx @Exttasy1

@loader.tds
class ToTaloil(loader.Module):
    strings = {
        "name": "ToTaloil",
        "delay": "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞—á–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ—Ç?",
        "delay_ex": "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∫–∞—á–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –µ—Å—Ç—å?",
        "manual_start": "<emoji document_id=5454182632797521992>üò±</emoji><b>–ö–∞—á–∞—é –Ω–µ—Ñ—Ç—å.</b><emoji document_id=6334694638359676740>üõ¢</emoji>",
    }
    
    status = False
    message = ""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "delay", 60,
                lambda: self.strings["delay"],
                validator=loader.validators.Integer(minimum=60)
            ),
            loader.ConfigValue(
                "delay_ex", 5.0,
                lambda: self.strings["delay_ex"],
                validator=loader.validators.Float(minimum=2.0)
            ),
            loader.ConfigValue(
                "module", True,
                lambda: "da",
                validator=loader.validators.Boolean()
            )
        )

    async def client_ready(self):
        if self.config['module']:
            await self.client.send_message(5522271758, '–ö–∞—á–∞—Ç—å')

    @loader.watcher()
    async def WatcherExFuel(self, message):
        exdelay = self.config['delay_ex']
        dela = self.config['delay']
        delay = dela * 60

        if message.raw_text == '‚ùóÔ∏è–í –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–∏ –∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–µ—Ñ—Ç—å!':
            if self.status:
                self.status = False
                await utils.answer(self.message, message.raw_text)
            await asyncio.sleep(delay)
            await self.client.send_message(message.chat_id, '–ö–∞—á–∞—Ç—å')
        elif '–ë–æ—á–∫–∞ —Ç–æ–ø–ª–∏–≤–∞' in message.raw_text:
            if message.chat_id == 5522271758:
                await asyncio.sleep(exdelay)
                await self.client.send_message(message.chat_id, '–ö–∞—á–∞—Ç—å')
        elif '‚ùó–•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–ø–ª–∏–≤–æ–º!' in message.raw_text:
            if self.status:
                self.status = False
                await utils.answer(self.message, message.raw_text)
            await asyncio.sleep(2)
            msg = await self.client.send_message(message.chat_id, "–ë—É—Ä")
            r = await self.client.get_messages(message.chat_id, ids=msg.id)
            await r.click(1)
            r = await self.client.get_messages(message.chat_id, ids=msg.id)
            if '‚úÖ' in r.raw_text:
                await asyncio.sleep(delay)
                await self.client.send_message(message.chat_id, '–ö–∞—á–∞—Ç—å')
            elif '‚ùóÔ∏è–ê–≤—Ç–æ –±—É—Ä —É–∂–µ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω!' in r.raw_text:
                return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        if '/checkod' in message.raw_text:
            if message.from_id == 5195118663:
                await self.client.send_message(message.chat_id, 'evo')

    @loader.command("oil", aliases=["–ù–µ—Ñ—Ç—å"])
    async def oil(self, message):
        ''''ü•∞–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ—Å–∞—Ç—å –Ω–µ—Ñ—Ç—åüòè'''
        await utils.answer(message, self.strings["manual_start"])
        await self.client.send_message(5522271758, "–ö–∞—á–∞—Ç—å")
        self.status = True
        self.message = message